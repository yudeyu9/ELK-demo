<?xml version="1.0" encoding="UTF-8"?><configuration debug="false">    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->    <property name="LOG_HOME" value="${user.dir}/logs/"/>    <springProperty scope="context" name="appName" source="spring.application.name"/>    <springProperty scope="context" name="ip" source="spring.cloud.client.ipAddress"/>    <!-- 控制台输出 -->    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>        </encoder>    </appender>    <!-- 打印默认日志 到日志文件中 按照每天生成日志文件-->    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            <fileNamePattern>${LOG_HOME}/${appName}/info.log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>            <MaxHistory>5</MaxHistory><!-- 只保存5天的日志 -->            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                <maxFileSize>500MB</maxFileSize><!-- 分片文件大小500MB -->            </timeBasedFileNamingAndTriggeringPolicy>        </rollingPolicy>        <append>true</append>        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>        </encoder>        <filter class="ch.qos.logback.classic.filter.LevelFilter">            <level>info</level>            <onMatch>ACCEPT</onMatch>            <onMismatch>DENY</onMismatch>        </filter>    </appender>    <!-- 打印入口出口的日志 AOP切面定义的日志格式 -->    <appender name="logstash" class="ch.qos.logback.core.rolling.RollingFileAppender">        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            <fileNamePattern>${LOG_HOME}/${appName}/info/logstash.log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>            <MaxHistory>5</MaxHistory><!-- 只保存5天的日志 -->            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                <maxFileSize>500MB</maxFileSize><!-- 每个日志最大为500MB 和保存天数不冲突 -->            </timeBasedFileNamingAndTriggeringPolicy>        </rollingPolicy>        <append>true</append>        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">            <pattern>%msg%n</pattern>            <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>-->            <charset>utf-8</charset>        </encoder>        <filter class="ch.qos.logback.classic.filter.LevelFilter">            <level>info</level>            <onMatch>ACCEPT</onMatch>            <onMismatch>DENY</onMismatch>        </filter>    </appender>    <!-- 打印异常日志 到日志文件中 -->    <appender name="FILEERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">            <fileNamePattern>${LOG_HOME}/${appName}/error/error.log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>            <MaxHistory>5</MaxHistory>            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">                <maxFileSize>100MB</maxFileSize>            </timeBasedFileNamingAndTriggeringPolicy>        </rollingPolicy>        <append>true</append>        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">            <providers>                <timestamp>                    <timeZone>UTC</timeZone>                </timestamp>                <pattern>                    <pattern>                        {                        "ip": "${ip}",                        "app": "${appName}",                        "level": "%level",                        "trace": "%X{X-B3-TraceId:-}",                        "span": "%X{X-B3-SpanId:-}",                        "parent": "%X{X-B3-ParentSpanId:-}",                        "thread": "%thread",                        "class": "%logger",                        "message": "%message",                        "stack_trace": "%exception"                        }                    </pattern>                </pattern>            </providers>        </encoder>        <filter class="ch.qos.logback.classic.filter.LevelFilter">            <level>error</level>            <onMatch>ACCEPT</onMatch>            <onMismatch>DENY</onMismatch>        </filter>    </appender>    <!--myibatis log configure-->    <logger name="com.apache.ibatis" level="TRACE"/>    <logger name="java.sql.Connection" level="DEBUG"/>    <logger name="java.sql.Statement" level="DEBUG"/>    <logger name="java.sql.PreparedStatement" level="DEBUG"/>    <!-- 需要更改为对应AOP的包名 切记-->    <logger name="com.demo.elk.util.prinLog.PringLog" level="INFO" additivity="false">        <!-- 打印请求和返回的数据 通过ELK进行管理-->        <appender-ref ref="logstash"/>    </logger>    <!-- 日志输出级别 -->    <root level="INFO">        <!-- STDOUT 控制台输出  上线可屏蔽-->        <appender-ref ref="STDOUT"/>        <!-- FILE 默认log的打印 到文件 -->        <appender-ref ref="FILE"/>        <!-- FILEERROR 打印异常信息 到文件 -->        <appender-ref ref="FILEERROR"/>        <!--        <appender-ref ref="logstash" />-->    </root></configuration>